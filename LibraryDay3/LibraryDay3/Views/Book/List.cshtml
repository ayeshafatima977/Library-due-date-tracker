@{
    ViewData["Title"]="List";
}

<h1>List</h1>
@*Create a form with a checkbox “Filter to Overdue”.
    When the page loads with the checkbox checked (query string parameter), call the “GetOverdueBooks()” method instead of the “GetBooks()” method
*@
<form action="/Book/List" method="get">
    <label for="filter">Filter Overdue Books</label>
    <input type="checkbox" name="filter" @if ( ViewBag.Filter=="on" ) { @("checked") } />
    <button type="submit">Filter</button>
</form>


<table class="table table-striped table-dark">
    <thead class="thead-light">
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>Author</th>
            <th>Publication Date</th>
            <th>Checked Out Date</th>
            <th>Due Date</th>
            <th>Returned Date</th>
        </tr>
    </thead>
    <tbody>
        @foreach ( Book book in ViewBag.Books )
        {
            <tr>
                <td><a href="/Book/Details?id=@(book.ID)">@(book.ID)</a></td>
                <td>@(book.Title)</td>
                <td>@(book.Author.Name)</td>
                <td>@(book.PublicationDate.ToShortDateString())</td>
            </tr>

                @if ( book.Borrows.Count>0 )
                {
                    //Most latest date
                <td>@(book.Borrows.OrderByDescending(x => x.CheckedOutDate).FirstOrDefault().DueDate.ToShortDateString())</td>
                <td>@book.Borrows.OrderByDescending(x => x.CheckedOutDate).FirstOrDefault().CheckedOutDate.ToShortDateString())</td>
                <td>@(book.Borrows.OrderByDescending(x => x.CheckedOutDate).FirstOrDefault().ReturnedDate==null ? "Not Returned" : ((DateTime) book.Borrows.OrderByDescending(x => x.CheckedOutDate).FirstOrDefault().ReturnedDate).ToShortDateString()))</td>


                    }
                }
                
    </tbody>
</table>
